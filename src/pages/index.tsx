import Head from "next/head";
import { Inter } from "next/font/google";
import { searchChannels } from "@/shared/api/axios";
import { useRouter } from "next/navigation";
import { useDebouncedValue } from "@mantine/hooks";
import { useEffect, useState } from "react";
import { useQuery } from "@tanstack/react-query";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const navigate = useRouter();
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [debouncedSearchQuery] = useDebouncedValue(searchQuery, 400);
  const [showNotification, setShowNotification] = useState<boolean>(false);

  useEffect(() => {
    const userNotFound = sessionStorage.getItem("userNotFound");
    if (userNotFound) {
      setShowNotification(true);

      sessionStorage.removeItem("userNotFound");

      setTimeout(() => {
        setShowNotification(false);
      }, 5000);
    }
  }, []);

  console.log(showNotification);

  const {
    data: searchResults,
    refetch,
    isFetching,
  } = useQuery({
    queryKey: ["searchResults", debouncedSearchQuery],
    queryFn: async () => searchChannels(debouncedSearchQuery),
    enabled: !!debouncedSearchQuery,
  });

  useEffect(() => {
    if (debouncedSearchQuery) {
      refetch();
    }
  }, [debouncedSearchQuery, refetch]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-[2000px] pt-20">
        <main className="h-full w-full overflow-hidden">
          <div className="pointer-events-none absolute inset-0 z-[-20] opacity-30 mix-blend-overlay"></div>
          {/* <div className={s.figure3}></div>
          <div className={s.figure4}></div> */}
          <header className="flex flex-col items-center justify-end bg-primary py-24 md:py-12">
            <div className="flex flex-col items-center justify-center ">
              <h1>
                Discover Twitch <br />
                Vods
              </h1>
              <p>
                Watch twitch past broadcasts streams Start by
                <br />
                Typing twitch username...
              </p>
            </div>
            <div className="flex w-28 xl:w-20 lg:w-14">
              <input
                className="flex "
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </header>
          <div className="flex justify-center text-secondary">
            {searchQuery && isFetching ? (
              <div className="flex pt-12 text-2xl text-secondary">
                {/* <FaSpinner className={s.spinner} /> */}
              </div>
            ) : (
              <div className="w-[476px] xl:w-[400px] lg:w-[340px] md:w-[200px]">
                {searchResults?.map((channel) => (
                  <div
                    className="relative flex cursor-pointer list-none items-start rounded-lg pl-5 pt-3 text-secondary no-underline hover:bg-black/50 hover:opacity-80"
                    key={channel.id}
                    onClick={() => navigate.push(`/streamer/${channel.id}`)}
                  >
                    <div className="">
                      <img
                        className="w-1/2 rounded-full"
                        src={channel.thumbnail_url}
                        alt=""
                      />
                      <span className="top[-20px] relative pl-5">
                        {channel.display_name}
                      </span>
                      {/* {channel.is_live && <GoDotFill />} */}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          {showNotification && (
            <div className="left1/2 top-4 flex h-20 w-[200px] items-center justify-center bg-black text-secondary">
              <div className="flex items-center justify-center pr-[-20px] text-base text-secondary w-1/2">
                {/* <BiError /> */}
                <div className="w-2/5">User Not Found</div>
              </div>
            </div>
          )}
        </main>
      </main>
    </>
  );
}
